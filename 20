//#define _CRT_SECURE_NO_WARNINGS
//#include <stdio.h>

//int getc(unsigned int n)   //求数二进制中1的个数
//{
//	int c = 0;
	//while (n)
	//{
	//	if (n % 2 != 0)
	//	{
	//		c++;
	//	}
	//	n = n / 2;
	//}

	//for (int i = 0; i < 32; i++)
	//{
	//	if (((n >> i) & 1) == 1)
	//	{
	//		c++;
	//	}
	//}

//	while (n)                //n=13，1101 -> 1100 -> 1100 -> 1011 -> 1000 -> 0111 -> 0000
//	{
//		n = n & (n - 1);
//		c++;
//	}
//	return c;
//}

//int getd(int m, int n)   //求两个数二进制中有多少位不同的数
//{
//	int tmp = m ^ n;
//	return getc(tmp);
//	
//}

//void print(int n)   //分别打印数二进制的奇数位和偶数位
//{
//	//01010101010101010101010101010101
//	int i;
//	for (i = 30; i >= 0; i -= 2)
//	{
//		printf("%d ", (n >> i) & 1);
//	}   //打印奇数位
//
//	for (i = 31; i >= 0; i -= 2)
//	{
//		printf("%d ", (n >> i) & 1);
//	}    //打印偶数位
//}

//int strl(char* p)   //字符串长度
//{
//	int count = 0;
//	while (*p != '\0')
//	{
//		count++;
//		p++;
//	}
//	return count;
//}

//void reverse(char* arr)   字符串逆序
//{
	//int l = 0;
	//int r = strl(arr) - 1;
	//while (l < r)
	//{
	//	char tmp = arr[l];
	//	arr[l] = arr[r];
	//	arr[r] = tmp;
	//	l++;
	//	r--;
	//}

	//char tmp = arr[0];
	//int len = strl(arr);
	//arr[0] = arr[len - 1];
	//arr[len - 1] = '\0';
	//if(strl(arr+1)>=2)
	//	reverse(arr + 1);
	//arr[len - 1] = tmp;
//}

//int snm(unsigned int x)
//{
	//static int s = 0;
	//s = s + x % 10;
	//x = x / 10;
	//if (x)
	//	snm(x);
	//return s;

//	if (x > 9)
//	{
//		return snm(x / 10) + x % 10;
//	}
//	else
//	{
//		return x;
//	}
//}

//int main()
//{
	//int a;
	//scanf("%d", &a);
	//printf("%d", getc(a));

	//char arr[] = "abcdef";
	//reverse(arr);
	//printf("%s", arr);

	//unsigned int n;
	//scanf("%d", &n);
	//printf("%d", snm(n));

//	return 0;
//}
