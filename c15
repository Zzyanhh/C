//#define _CRT_SECURE_NO_WARNINGS
//#include <stdio.h>
//int main()
//{
	//int a = 16;   //00000000000000000000000000010000
	//int b = a >> 1;   //00000000000000000000000000001000
	//int c = a >> 2;   //00000000000000000000000000000100
	//int d = -a >> 1;   //10000000000000000000000000010000，11111111111111111111111111101111，11111111111111111111111111110000，
	//                  //111111111111111111111111111111000，111111111111111111111111111110111，1000000000000000000000000001000
	//printf("%d ", b);
	//printf("%d ", c);
	//printf("%d", d);
	//c = b << 1;
	//printf("%d ", c);

	//int a = 3;   //011
	//int b = 5;   //101
	//int c = a & b;
	//int d = a | b;
	//int e = a ^ b;
	//printf("%d ", c);   //1
	//printf("%d ", d);   //7
	//printf("%d ", e);   //6

	//不创建临时变量交换两数
	//1.加减法，可能会溢出
	//int a = 3; 
	//int b = 5;
	//printf("brfore: a=%d  b=%d\n", a, b);
	//a = a + b;
	//b = a - b;
	//a = a - b;
	//printf("after: a=%d  b=%d", a, b);
	//2.异或法
	//a = a ^ b;
	//b = a ^ b;
	//a = a ^ b;
	//printf("after: a=%d  b=%d", a, b);
	//return 0;

	//计算二进制1的个数
	//一般
	//int a;   //32bit
	//int count = 0;
	//scanf("%d", &a);
	//while (a)
	//{
	//	if (a % 2 == 1)
	//	{
	//		count++;
	//	}
	//	a = a / 2;
	//}   //只能算正数
	//printf("%d", count);
	//
	//int i = 0;
	//for (i; i < 32; i++)
	//{
	//	if ((a >> i) & 1)   //00000000000000000000000000000001
	//		count++;
	//}
	//printf("%d", count);

//	char c = 'r';
//	char* p = &c;
//	printf("%d", sizeof(p));
//	printf("%d", sizeof(int [10]));
//}

//要使商为小数，除数和被除数至少一个为浮点数
//取模两数都要为整型
//反码+1得到补码
//移位操作符（对二进制），算术移位（右移：丢弃右边，左边补上符号位），逻辑移位（右移：丢弃右边，左边补上0）
  //左移：丢弃左边，右边补0      移位正数三码都可，负数补码     移位数不能为负
//   &  |  ^，二进制与，或，异或
