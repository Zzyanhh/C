//#define _CRT_SECURE_NO_WARNINGS
//#include <stdio.h>
//struct stu
//{
//	char name[10];
//	int age;
//	char id[15];
//};
//int main()
//{
	//short s=0;   //2byte
	//int a = 10;
	//printf("%d", sizeof(s=a + 5));
	//printf("%d", s);

	//int a = 0;
	//printf("%d", ~a);

	//int a = 11;   //00000000000000000000000000001011
	//a = a | (1 << 2);   //00000000000000000000000000000100
	//printf("%d\n", a);    //00000000000000000000000000001111
	//a = a & (~(1 << 2));
	//printf("%d\n", a);

	//int i = 0, a = 0, b = 2, c = 3, d = 4;
	//i = a++ && ++b && d++;   //逻辑与，直到为假，后面不执行
	//printf("a=%d\nb=%d\nc=%d\nd=%d", a, b, c, d);  //1234
	//i = a++ || ++b|| d++;   //逻辑或，直到为真，后面不执行
	//printf("a=%d\nb=%d\nc=%d\nd=%d", a, b, c, d);  //1234

	//int a = 10;
	//int b = 20;
	////a = (a > b ? a : b);
	////printf("%d", a);
	//int c = (a > b, a = b + 2, a, b = a + 1);
	//printf("%d", c);

	//stu s = { "周瑜",20,"123456789" };
	//printf("%s\n", s.name);
	//printf("%d\n", s.age);
	//printf("%s\n", s.id);
	//stu* p = &s;
	//printf("%s\n", (*p).name);
	//printf("%d\n", (*p).age);
	//printf("%s\n", (*p).id);
	//printf("%s\n", p->name);
	//printf("%d\n", p->age);
	//printf("%s\n", p->id);

	//char a = 3;    //00000011  -->   00000000000000000000000000000011
	//char b = 127;   //01111111  -->  00000000000000000000000001111111
	//                            //   00000000000000000000000010000010
	//char c = a + b;   //10000010
	////11111111111111111111111110000010  补码
	////11111111111111111111111110000001  反码
	////10000000000000000000000001111110  原码
	//printf("%d", c);   //-126

	//char a = 0xb6;
	//short b = 0xb600;
	//int c = 0xb6000000;
	//if (a == 0xb6)
	//	printf("a");
	//if (b == 0xb600)
	//	printf("b");
	//if (c == 0xb6000000)
	//	printf("c");   // a,b经过整型提升   0x为十六进制前缀

	//char c = 1;
	//printf("%u\n", sizeof(c));
	//printf("%u\n", sizeof(+c));
	//printf("%u\n", sizeof(!c));   //%u  无符号十进制
	//return 0;
//}

// ~ 二进制按位取反
 // 三目操作符  exp?exp1:exp2
//逗号表达式   exp，exp1，exp2，exp...   返回最后一个表达式的结果
//函数调用操作符 ()  函数名也为操作对象
//隐式类型转换，表达式中的字符和短整型使用前转换为普通整型，称为整型提升（根据符号位）
